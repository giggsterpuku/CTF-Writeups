Challenge: NewYearBot
Category: Web Exploit
Description: New Year New Code! My friend decide to learn code in new year, here his very first website:
http://172.105.120.180:9999/
File - He said it is very secure because he is very strict on what user can input, can you check?
https://drive.google.com/file/d/1tU18ePUAHHYpxJ9QhdVKBpuBm_eXy--r/view?usp=sharing
Note - Don't generate excessive load. Scanning/Dirbust is not needed.
Author - @tsug0d

Looking at the main.py source, I thought at first the key to solving the chall is to send POST requests to grab all the
sequential characters of the flag. In the source, the flag is placed into a FL4G variable, and as it would seem to be
intended, the author of the website used some arrays of greetings whose entries were randomly picked when the user
choses a type of greeting on the website. However, there is a bug that is made from the faulty checks of the program.
The POST request does not restrict all inputs for the greeting type, it only checks if the type inputted could be an
identifier (having alphanumberic sequences with underscores). With this, I figure that I could just input FL4G for that
field, tricking the program to leak out characters of the flag since the greeting type and number submitted into the
form are used. The code here has the bug:


	if greetType != None and greetNumber != None:
		greetNumber = re.sub(r'\s+', '', greetNumber)
		if greetType.isidentifier() == True and botValidator(greetNumber) == True: # weak checks here!
			if len("%s[%s]" % (greetType, greetNumber)) > 20:
				greeting = fail
			else:
				greeting = eval("%s[%s]" % (greetType, greetNumber)) # here is the bug!


Now that is cool and all, but the problem to solve now is: how do we grab all the characters in the flag? From looking
at the main.py file, there is the botValidator() function that checks the number field in the POST request to see if
it's valid. The function, like the comments written in main.py say, it essentially checking that the field has numerical
values and if all those numerical characters concatenated in sequential order end up being greater than the size of the
aforementioned greetings arrays. I had a difficult time figuring how to get past this restriction, as I was only able
to get the first 6 characters of the flag, which isn't much because those characters are in the standard format of the
flag. However, looking back at the botValidator() code, I realized that the check still allows for characters that are
not numerical to be included in the number field so that the value can be evaluated. Knowing this, I realized that I
could find the values on the other side of the flag (the last characters at the end) by using a negative sign to denote
negative values, and that got me up to -5 with the last 5 characters of the flag. Thinking more, I figure that I could
used the ~ operator to invert the bits of the integer I supply to make a number that is 1 unit larger in magnitude but
having an opposite sign. Putting the two ideas together, I pieced the flag together by chaining ~ and - operators in an
alternating fashion to be able to grab all the rest of the characters in the flag.

Flag: TetCTF{JuSt_F0rFunn(^_^}
Solved 1 day in by giggsterpuku
