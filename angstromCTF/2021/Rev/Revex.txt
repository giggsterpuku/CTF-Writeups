################################## Write-Up ####################################
# Challenge: Revex
# Category: Rev
# Points: 75
# Description: As an active reddit user, clam frequently browses r/ProgrammerHumor. However, the reposts about how hard regex is makes him go >:((((. So, clam decided to show them who's boss. (String to be reversed below)
# ^(?=.*re)(?=.{21}[^_]{4}\}$)(?=.{14}b[^_]{2})(?=.{8}[C-L])(?=.{8}[B-F])(?=.{8}[^B-DF])(?=.{7}G(?<pepega>..).{7}t\k<pepega>)(?=.*u[^z].$)(?=.{11}(?<pepeega>[13])s.{2}(?!\k<pepeega>)[13]s)(?=.*_.{2}_)(?=actf\{)(?=.{21}[p-t])(?=.*1.*3)(?=.{20}(?=.*u)(?=.*y)(?=.*z)(?=.*q)(?=.*_))(?=.*Ex)
# Author: aplet123
# Hint: It's ECMAScript regex syntax.
#
# Before I solved this chall I knew what regex was. If you don't, it's a
# standard for search patterns, as in finding what words/phrases/strings fit a
# certain criteria. So, to figure out what "search term" (aka flag) would be
# acceptable to the criteria, I broke the fat regex expression into several
# parts, interpreted them, and played jigsaw with some letters. (See breakdown
# below)
#
# (?=.*re) -> must have string "re" somewhere in flag
# (?=.{21}[^_]{4}\}$) -> any 21 chars anywhere followed by 4 chars that aren't "_",  "}" at the end; figured that 26 is the length of the flag
# (?=.{14}b[^_]{2}) -> any 14 chars anywhere followed by "b" and two non-"_" chars
# (?=.{8}[C-L]) -> any 8 chars anywhere followed by a char in range of C and L
# (?=.{8}[B-F]) -> any 8 chars anywhere followed by char in range of B and F
# (?=.{8}[^B-DF]) -> any 8 chars anywhere not followed by char in range of B and D, char not F; figured there's and E at position 9 from this and prev 2 lookarounds
# (?=.{7}G(?<pepega>..).{7}t\k<pepega>) -> 7 chars anywhere followed by G, any two chars (grouped in pepega) followed by any 7 chars, two of the same chars in the pepega group
# (?=.*u[^z].$) -> u followed by any char not z followed by any char at the end of the flag
# (?=.{11}(?<pepeega>[13])s.{2}(?!\k<pepeega>)[13]s) -> any 11 chars anywhere followed by either a 1 or 3 (which is put in group pepeega), then any 7 chars then t then anything that you didn't type to be in pepeega (so if you chose 1, then you can't retype a 1 in that position, can only type 3, vice versa), followed by s
# (?=.*_.{2}_) -> must have "_" followed by any 2 chars and another "_" somewhere in flag
# (?=actf\{) -> must have "actf{" in flag
# (?=.{21}[p-t]) -> any 21 chars anywhere followed by a char in range of p and t
# (?=.*1.*3) -> must have a 1 before a 3 in the flag
# (?=.{20}(?=.*u)(?=.*y)(?=.*z)(?=.*q)(?=.*_) -> any 20 chars followed by (in any order) u, y, z, q, and "_"
# (?=.*Ex) -> must have string "Ex" in flag
# 
# I interpreted the .{#} as the relative distances of the search criteria from
# the start of the flag.
#
# Solved by: Ryan Nguyen
# Solved at: after competition
# Flag: actf{reGEx_1s_b3stEx_qzuy}
################################################################################
