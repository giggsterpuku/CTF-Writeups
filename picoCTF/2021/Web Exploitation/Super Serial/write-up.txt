Challenge: Super Serial
Category: Web Exploitation
Description: Try to recover the flag stored on this website http://mercury.picoctf.net:3449/
Hints:
	-1: The flag is at ../flag

The first thing I did was look at the mirrored files of the server, which included robots.txt. The robots.txt file disallowed the file admin.phps
from being accessed, hinting that there were more files with the same extension in the name on the server that were not found earlier. I looked up
what a .phps file is and found that it was the source code of a .PHP program. I found that there were 3 more files: cookie.phps, authentication.phps,
and index.phps (there are also .php files corresponding to them, I found them useless though because they didn't have any useful PHP code to look
at). The three corresponding .php files linked to one another (as explicitly stated by the require_once() command). cookie.phps shows that there are
two key attributes in its permissions class, is_guest() and is_admin(), which has code that suggests that the web server uses SQL to verify that
the creditials are valid. However, it also tries to look for a cookie named "login" and deserializes (using the command unseralize()) and decodes
its contents to be interpreted. authentication.phps has a access_log class, which has the __toString() function that invokes the access_log to read
the contents of the file it is assigned when an access_log object is constructed. index.phps just shows that when you enter a username and password
to the server, a login cookie is made using serialize() to make an object for logging. The vulnerability lies within the unserialize() function in
cookie.phps, which can be summarized by PHP documentation:

********************************************************************** Warning **********************************************************************
Do not pass untrusted user input to unserialize() regardless of the options value of allowed_classes. Unserialization can result in code being
loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this. Use a safe, standard data
interchange format such as JSON (via json_decode() and json_encode()) if you need to pass serialized data to the user.

If you need to unserialize externally-stored serialized data, consider using hash_hmac() for data validation. Make sure data is not modified by
anyone but you.
*****************************************************************************************************************************************************

We know that the user input we control are the cookies sent to the server, so what we can do is mess around with the cookies. I created a "login"
cookie that has the encoded contents of a serialized access_log object that is assigned the log file "../flag," which I made using a PHP script.
So, when I import the cookie onto the web server, it will actually create an access_log object and also invoke a desrialization error because
of the bad interpretation of the object since it has no is_guest() or is_admin() attributes, which in turn somehow invokes the __toString() method
of the object, thus spitting out the flag on error page.

Flag: picoCTF{th15_vu1n_1s_5up3r_53r1ous_y4ll_b4e3f8b1}
Solved by giggsterpuku in picoGym
