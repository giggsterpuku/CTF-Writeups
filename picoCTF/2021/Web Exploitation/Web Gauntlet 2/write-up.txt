Challenge: Web Gauntlet 2
Category: Web Exploitation
Description: This website looks familiar... Log in as admin Site: http://mercury.picoctf.net:35178/ Filter: http://mercury.picoctf.net:35178/filter.php
Hints:
	-1: I tried to make it a little bit less contrived since the mini competition.
	-2: Each filter is separated by a space. Spaces are not filtered.
	-3: There is only 1 round this time, when you beat it the flag will be in filter.php.
	-4: There is a length component now.
	-5: sqlite

I managed to figure out the first half of the challenge, but not the second part, so I referred to a write-up. From the filter page, I found that the
words that were searched for the invalidate the user input in the server are these: or and true false union like = > < ; -- /* */ admin. Looking at
hint 4, I tried finding intel from making some inputs, and I found out that the SQL query made is actually printed out on the page itself when I
supply a username and password: SELECT username, password FROM users WHERE username='<input>' AND password='<input>'. In addition, the constraint
hint 4 suggested that I found was that the combined input for the username and password supplied could be no more than 35 characters. For the user
field input (what I referred to earlier as the first half of the challenge), I found that strings can be concatenated in SQLite syntax using double
pipes (||), which do not signify an OR operator in the query, so I figured that the way to style the input to the username is by splitting up the
word admin and concatenating the pieces like so: ad' || 'min (doesn't exactly have to be like this, just as long as you break up "admin"). I tried
commenting the rest of the query out in the username field using a # symbol, but that wasn't interpreted like I intended it to be, as it is another
comment signifier in SQL syntax. I looked up a bunch of SQLi cheat sheets like this one to try to figure out what to put in the password field:
https://websec.wordpress.com/2010/12/04/sqli-filter-evasion-cheat-sheet-mysql/. I did stumble onto what ended up being a working payload to place in
the password field, but I didn't try it because I tried a very similar payload. Usually, I knew that a boolean expression that can be used to bypass
the password check in SQLi's is using the payload ' OR 1=1;--, but obviously most of the characters in the payload would be invalidated by the
filter. Nonetheless, I did try to imitate it by trying to use the IS operator, which compares two values as you may intuitively figure out. so, I
tried using a payload integrating that keyword: ' IS ', trying to compare two empty strings to evaluate the expression as True. To my dismay, it did
not work. I then stupidly glazed over what would be the working payload I used to solve the challenge: using IS NOT in place of it. I looked at a
video write-up, and it used just that. Being astounded and disappointed by my smol bren, I them tried that using two different strings (ie a' and
 'b), and voila, challenge solved. Funny enough, I just replaced the IS in my closest working payload shown above with IS NOT and it also worked,
which I think is due to some potential object comparison, typecasting, or the fact that IS is usually used to compare a value to NULL (IS NULL). The
filter page also spills out its source code after I solved the challenge, so I included it with this write-up for future reference.

Flag: picoCTF{0n3_m0r3_t1m3_86f3e77f3c5a076866a0fdb3b29c52fd}
Solved by giggsterpuku in picoGym
