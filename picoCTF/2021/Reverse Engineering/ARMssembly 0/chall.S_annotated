* This is a writeup of my thinking process and accumulated ARM assembly research the chall. It was a struggle going through the chall, but after looking at writeups and rereading andlistening to documentation, most of it make sense now. *
Challenge: ARMssembly 0
Category: Reverse Engineering
Description: What integer does this program print with arguments 182476535 and 3742084308? File: chall.S Flag format: picoCTF{XXXXXXXX} -> (hex, lowercase, no 0x, and 32 bits. ex. 5614267 would be picoCTF{0055aabb})
Hints:
	- 1: simple compare
Points: 40

.arch armv8-a
	.file	"chall.c"
	.text
	.align	2
	.global	func1
	.type	func1, %function
func1: ; gist: returns the max of the two args, which in this case must be 3742084308
	sub	sp, sp, #16 ; sp -= 16 ; init stack frame
	str	w0, [sp, 12] ; [sp + 12] = w0
	str	w1, [sp, 8] ; [sp + 8] = w1
	ldr	w1, [sp, 12] ; w1 = w0
	ldr	w0, [sp, 8] ; w0 = original val pointed to by w1, basically this and prev instruction resemble a swap
	cmp	w1, w0 ; crux of hint
	bls	.L2 ; jump if w0 < w1
	ldr	w0, [sp, 12] ; w0 = original val of w0
	b	.L3
.L2:
	ldr	w0, [sp, 8] ; w0 = original val of w1
.L3:
	add	sp, sp, 16 ; close func1 stack frame, hop and leave
	ret
	.size	func1, .-func1
	.section	.rodata
	.align	3
.LC0:
	.string	"Result: %ld\n"
	.text
	.align	2
	.global	main
	.type	main, %function
main: ; arguments are 182476535 and 3742084308, param go on stack according to order given to fxn
	stp	x29, x30, [sp, -48]! ; push x29 and x30 onto stack (no push/pop in ARM! push:str::pop:ldr), x29 is frame pointer (fp) and x30 is link register (lr)
	add	x29, sp, 0 ; x29 = sp *note: x -> 64-bit register, w -> 32-bit
	str	x19, [sp, 16] ; [sp + 16]  = x19, x19 has 182476535
	str	w0, [x29, 44] ; [x29 + 44] = w0, w0 has 3742084308
	str	x1, [x29, 32] ; [x29 + 32] = x1, x1 has argc param (implicit), which is usually passed in after first argument given, should be 2
	ldr	x0, [x29, 32] ; x0 = addr of [x29 + 32]
	add	x0, x0, 8 ; x0 = addr of [x29 + 32] + 8
	ldr	x0, [x0] ; x0 = val at resulting addr, loads arg to atoi
	bl	atoi ; calls atoi(), fxn used her and later to format args passed from cmd line into interger for func1 
	mov	w19, w0 ; w19 = addr held in w10
	ldr	x0, [x29, 32] ; x0 = addr of [x29 + 32]
	add	x0, x0, 16 ; x0 = addr of [x29 + 32] + 16
	ldr	x0, [x0] ; x0 = val at resulting addr, loads arg to atoi
	bl	atoi ; calls atoi()
	mov	w1, w0 ; w1 = w0 = 3742084308
	mov	w0, w19 ; w0 = w19 = 182476535
	bl	func1
	mov	w1, w0
	adrp	x0, .LC0
	add	x0, x0, :lo12:.LC0
	bl	printf ; prints val returned by func1
	mov	w0, 0
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	ret
	.size	main, .-main
	.ident	"GCC: (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0"
	.section	.note.GNU-stack,"",@progbits
Final result: 3742084308
Flag: picoCTF{df0bacd4}
Solved in picoGym
