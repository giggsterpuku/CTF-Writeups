#!/usr/bin/env python3

import binascii

blocks = 264

'''
# Finding seeds and random values early so script doesn't need to do extra work after running this once
seeds = []
randoms = []
for i in range(blocks):
	seeds.append(((i + 1) * 127) % 500)
	randoms.append(((((i + 1) * 327) % 681) + 344) % 313)

print(seeds)
print(randoms)
'''
seeds = [127, 254, 381, 8, 135, 262, 389, 16, 143, 270, 397, 24, 151, 278, 405, 32, 159, 286, 413, 40, 167, 294, 421, 48, 175, 302, 429, 56, 183, 310, 437, 64, 191, 318, 445, 72, 199, 326, 453, 80, 207, 334, 461, 88, 215, 342, 469, 96, 223, 350, 477, 104, 231, 358, 485, 112, 239, 366, 493, 120, 247, 374, 1, 128, 255, 382, 9, 136, 263, 390, 17, 144, 271, 398, 25, 152, 279, 406, 33, 160, 287, 414, 41, 168, 295, 422, 49, 176, 303, 430, 57, 184, 311, 438, 65, 192, 319, 446, 73, 200, 327, 454, 81, 208, 335, 462, 89, 216, 343, 470, 97, 224, 351, 478, 105, 232, 359, 486, 113, 240, 367, 494, 121, 248, 375, 2, 129, 256, 383, 10, 137, 264, 391, 18, 145, 272, 399, 26, 153, 280, 407, 34, 161, 288, 415, 42, 169, 296, 423, 50, 177, 304, 431, 58, 185, 312, 439, 66, 193, 320, 447, 74, 201, 328, 455, 82, 209, 336, 463, 90, 217, 344, 471, 98, 225, 352, 479, 106, 233, 360, 487, 114, 241, 368, 495, 122, 249, 376, 3, 130, 257, 384, 11, 138, 265, 392, 19, 146, 273, 400, 27, 154, 281, 408, 35, 162, 289, 416, 43, 170, 297, 424, 51, 178, 305, 432, 59, 186, 313, 440, 67, 194, 321, 448, 75, 202, 329, 456, 83, 210, 337, 464, 91, 218, 345, 472, 99, 226, 353, 480, 107, 234, 361, 488, 115, 242, 369, 496, 123, 250, 377, 4, 131, 258, 385, 12, 139, 266, 393, 20, 147, 274, 401, 28]
randoms = [45, 59, 18, 32, 304, 5, 277, 291, 250, 264, 223, 237, 196, 210, 169, 183, 142, 156, 115, 129, 88, 102, 61, 75, 34, 48, 62, 21, 35, 307, 8, 280, 294, 253, 267, 226, 240, 199, 213, 172, 186, 145, 159, 118, 132, 91, 105, 64, 78, 37, 51, 65, 24, 38, 310, 11, 283, 297, 256, 270, 229, 243, 202, 216, 175, 189, 148, 162, 121, 135, 94, 108, 67, 81, 40, 54, 68, 27, 41, 0, 14, 286, 300, 259, 273, 232, 246, 205, 219, 178, 192, 151, 165, 124, 138, 97, 111, 70, 84, 43, 57, 71, 30, 44, 3, 17, 289, 303, 262, 276, 235, 249, 208, 222, 181, 195, 154, 168, 127, 141, 100, 114, 73, 87, 46, 60, 74, 33, 47, 6, 20, 292, 306, 265, 279, 238, 252, 211, 225, 184, 198, 157, 171, 130, 144, 103, 117, 76, 90, 49, 63, 77, 36, 50, 9, 23, 295, 309, 268, 282, 241, 255, 214, 228, 187, 201, 160, 174, 133, 147, 106, 120, 79, 93, 52, 66, 80, 39, 53, 12, 26, 298, 312, 271, 285, 244, 258, 217, 231, 190, 204, 163, 177, 136, 150, 109, 123, 82, 96, 55, 69, 83, 42, 56, 15, 29, 301, 2, 274, 288, 247, 261, 220, 234, 193, 207, 166, 180, 139, 153, 112, 126, 85, 99, 58, 72, 31, 45, 59, 18, 32, 304, 5, 277, 291, 250, 264, 223, 237, 196, 210, 169, 183, 142, 156, 115, 129, 88, 102, 61, 75, 34, 48, 62, 21, 35, 307, 8, 280, 294, 253, 267, 226, 240]

'''
# Generating results array, same reason as that for generating seeds and randoms
f = open('output.txt', 'r')
results = f.readlines()
f.close()
for i, entry in enumerate(results):
	results[i] = int(entry)
print(results)
'''
results = [879059547225600221, 71793452475485205, 1148698281253257227, 217070812329394967, 1085086090799284516, 4238685779263969, 1085311228075820020, 4486897510174167, 879257471590075933, 233062363111948053, 879310247956329413, 220620237942043428, 864704387274818528, 219564707018453810, 1080930139169943704, 284575531841633519, 1095289279840717921, 219827558966836273, 922164813414728577, 71789326353092547, 922970468266331303, 284624197914774733, 935887582569446640, 233341656386976839, 1095496211378261093, 270431259404009621, 922112088142040996, 271114274360574141, 936480455350027154, 14580558453485969, 1149315982842597017, 273649820165456770, 1134960775807159720, 69285389258153, 868979240123514018, 230541216188255296, 1148645726972267632, 72057336087430075, 1135966209599275106, 220398260916600638, 1152010064483073927, 271272397879702293, 1139343700758887558, 271077784355540943, 1139146754428701768, 4222399461461231, 922326496319573062, 283942073776672713, 1081923578845401015, 274442431825195106, 1097967845536444498, 16944574752682771, 935675805365747915, 67832102939014098, 1081920473329287448, 1073068336005587, 1081721748899955656, 55155024869773009, 918738451380057054, 274652781735887568, 918791227752582714, 270430592862047689, 922960640253902083, 17112864268238567, 878479842607955275, 229951587760733494, 881632416504951469, 1112495565767363, 882638470697435530, 17112815333330190, 1151848652045611600, 54057266045841968, 919582927853977200, 274441624099950113, 881860882925030709, 58476429884768707, 869190591810957703, 220606270746394268, 1138496186912600710, 288226252967132741, 1139407393294925175, 68609593282673765, 1095272117148061322, 68468771777351541, 935689876626275940, 287170512185785987, 1098877480162557621, 220452029779136139, 1138341911719821923, 287966424658087442, 933159088420617518, 57487952572330426, 1084466749241033436, 13735927918412192, 881805026941256233, 216450958350103112, 1135821692603413223, 284838396737815122, 1148422235162410505, 271130552259837474, 922972957682372071, 220675298603830864, 1139406530802367886, 18010259016859042, 879323443101908642, 284839262375919183, 1149490972761796781, 58493138394427981, 922182117624696644, 71780503401582160, 922129603001122379, 13464974967361, 918750881951576401, 57636189074621104, 882438342200737477, 233910087384579782, 882635416186125660, 288018432198980036, 882691507922931320, 229740485016616693, 1081778432842190433, 274504086948213472, 919012484050846377, 273870767986373374, 1098653128292552208, 17789823524785699, 936484823391600233, 288006061884174664, 1135755039810466391, 220610149264392545, 923026816572866165, 220673079782928545, 1084509890119794064, 57698195299630181, 1098597714352143950, 273662949817528928, 1084245170751013532, 233289910418682556, 1152868676445159022, 273861906596622869, 1152062995421196783, 16892006533755522, 878202962169560357, 219551526581911207, 1081712678517132855, 54901075530993324, 1138351810784785110, 287368617589457513, 918959449055625535, 68663387948777742, 864744991438602546, 17789270218755452, 879100224243548756, 18010272116257113, 879323430003683923, 284839275073057464, 935837243715555216, 233127265157825173, 1098822166335471510, 284585233327522172, 1081089049280840078, 66190813938289, 1085311369869266603, 217017417431055728, 1085086103734386376, 4238672944955073, 868969548061077922, 230585125518176963, 1134964279694586486, 58532504927404773, 935903202292740735, 13788713532460788, 1098610032472277687, 273808907837424086, 1098611059250691362, 287170705462591839, 935904280600953359, 54953797377651428, 1081972437337034002, 3431352717032734, 882490899915869684, 217017478683823314, 1080880677300142569, 3395020505739494, 864760452650840824, 68399248252862156, 1152854450759479489, 72056508471328536, 1135967031275879667, 220398260878299005, 923237031130165425, 220461087109169122, 1081778639814733919, 54940658191577131, 1094599850818548609, 271327652553490220, 1080916961136738199, 229961702408703798, 868279998848633946, 54044282154139485, 879258544116612891, 284625063628717240, 879258296069853009, 284798865657302933, 1152867835705298073, 55168202888248452, 1138513488130130342, 287107984222384471, 1085089592271237237, 271274871827451557, 923224455449361838, 67817894327611560, 878469330928386996, 270483416669012830, 879274208876507235, 220675540129136812, 868980306940527370, 230594235130183793, 1094599899900607733, 217282137553960044, 1094652833283493100, 283796252737158241, 878482303020224500, 270496420967206807, 1138513245732277422, 220675350747672793, 1085300646950993669, 14570660180524263, 1149279867130331935, 283727823485587214, 1135765772921798622, 55164714502340078, 919001518395568616, 14422035514995649, 919002553226628642, 270494089596571160, 1081075896199954192, 233909007654326019, 1081765291043638494, 3645104131685402, 881847842601189364, 287158284404650157, 933353496081530906, 288213815831556244, 868082087813444404, 71833031890124679, 882441640700022534, 233962879194169438, 1151852763148127243, 274455678322262261, 869181263355903934, 274442229753314412, 1135751534516958032, 71776131962646638, 932248434541314171, 229697655603511460, 1149491014637175127, 271063908134941100, 936537392976704440, 14636695302442350, 1098824639182863983, 216398129639732071, 1084469432518917257, 216177127761104710]

def unscramble(enc, seed):
	block = ''
	pairs = list(enc[i:i + 2] for i in range(0, len(enc), 2))
	is_set = list(False for i in range(30))
	for i in range(30): # each string should 60 bits long, so 30 loops per block
		y = (i * seed) % (len(enc) // 2)
		while is_set[y]:
			y = (y + 1) % 30
		if pairs[y] == '11':
			block += '1'
		else:
			block += '0'
		is_set[y] = True
	return block

og_blocks = []
for i, r in enumerate(results):
	if i == 0:
		fun = r ^ randoms[i]
	else:
		fun = r ^ results[i - 1] ^ randoms[i]

	og_blocks.append(unscramble(bin(fun)[2:], seeds[i]))

#print(og_blocks)

''' Thought string of bit might spell something like ASCII art
possible_msg = ''
for i, b in enumerate(og_blocks):
	possible_msg += b
	if i < 263:
		if (og_blocks[i + 1] == b):
			possible_msg += ' '
		else:
			possible_msg += '\n'
print(possible_msg)
'''

possible_msg = '0b'
for b in og_blocks:
	if b == '100001001100001100001100100001':
		possible_msg += '0'
	else:
		possible_msg += '1'
print(binascii.unhexlify('%x' % int(possible_msg, 2)))
