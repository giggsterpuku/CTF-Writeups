#!/usr/bin/env python3

################################## Write-Up ####################################
# Challenge: Mini RSA
# Category: Cryptography
# Description: What happens if you have a small exponent? There is a twist though, we padded the plaintext so that (M ** e) is just barely larger than N. Let's decrypt this: ciphertext
# Hints:
#	-1: RSA tutorial -> leads to Wiki article in how RSA is done
#	-2: How could having too small of an e affect the security of this key?
#	-3: Make sure you don't lose precision, the numbers are pretty big (besides the e value)
#	-4: You shouldn't have to make too many guesses
#	-5: pico is in the flag, but not at the beginning
#
# The vulnerability of the RSA encryption came from the fact that e is
# small. Usually you want the public key e to be small enough and are
# Fermat's numbers (numbers in the form 2^k + 1 where k is a positive
# integer) so that the computations for RSA encryption are fast, but you
# do not want them to be too small so as to basically allow for someone to
# bruteforce their way towards the key. Although small e's are faster to
# operate with, they are less secure in that the computation is then easier.
# Remember that m^e mod n gives the ciphertext, so with a small e, you can
# do the inverse without having to do prime factorization. The n was too
# huge for the chall so I wasn't able to even get its primes from a db or
# calculator. The for loop I used in this script should detail the process.
#
# Flag: picoCTF{e_sh0u1d_b3_lArg3r_a166c1e3}
# Points: 70
# Solved in picoGym
################################################################################

from Crypto.Util.number import *
from decimal import *

e = 3
ct = 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808154521995312832362835648711819155169679435239286935784452613518014043549023137530689967601174246864606495200453313556091158637122956278811935858649498244722557014003601909465057421728834883411992999408157828996722087360414577252630186866387785481057649036414986099181831292644783916873710123009473008639825720434282893177856511819939659625989092206115515005188455003918918879483234969164887705505900695379846159901322053253156096586139847768297521166448931631916220211254417971683366167719596219422776768895460908015773369743067718890024592505393221967098308653507944367482969331133726958321767736855857529350486000867434567743580745186277999637935034821461543527421831665171525793988229518569050
n = 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287
getcontext().prec = 1006 #number of digits in ciphertext, must be precise up to this amount of digits
'''for i in range(10000): # loops through possible products of n with i
	m = int(pow(Decimal(ct + n * i), Decimal(1) / Decimal(e)).to_integral_exact())
	flag = long_to_bytes(m)
	if b"picoCTF{" in flag:
		print(flag, i)
		break '''
m = int(pow(Decimal(ct + n * 3533), Decimal(1) / Decimal(e)).to_integral_exact()) # 3533 is the multiplicand with n that gives m^e
flag = long_to_bytes(m)
print(flag)
